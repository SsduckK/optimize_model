2023/06/29 22:25:54 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.8.5 (default, Mar  3 2023, 16:40:11) [GCC 9.4.0]
    CUDA available: True
    numpy_random_seed: 2115330353
    GPU 0,1: NVIDIA GeForce RTX 3090
    CUDA_HOME: /usr/local/cuda-11.2
    NVCC: Cuda compilation tools, release 11.2, V11.2.67
    GCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
    PyTorch: 1.7.1+cu110
    PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.0
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

    TorchVision: 0.8.2+cu110
    OpenCV: 4.5.5
    MMEngine: 0.7.3

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: None
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2023/06/29 22:25:54 - mmengine - INFO - Config:
model = dict(
    type='MaskRCNN',
    data_preprocessor=dict(
        type='DetDataPreprocessor',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        bgr_to_rgb=True,
        pad_mask=True,
        pad_size_divisor=32),
    backbone=dict(
        type='ResNet',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=True,
        style='pytorch',
        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),
    neck=dict(
        type='FPN',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        num_outs=5),
    rpn_head=dict(
        type='RPNHead',
        in_channels=256,
        feat_channels=256,
        anchor_generator=dict(
            type='AnchorGenerator',
            scales=[8],
            ratios=[0.5, 1.0, 2.0],
            strides=[4, 8, 16, 32, 64]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0]),
        loss_cls=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),
        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),
    roi_head=dict(
        type='StandardRoIHead',
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        bbox_head=dict(
            type='Shared2FCBBoxHead',
            in_channels=256,
            fc_out_channels=1024,
            roi_feat_size=7,
            num_classes=80,
            bbox_coder=dict(
                type='DeltaXYWHBBoxCoder',
                target_means=[0.0, 0.0, 0.0, 0.0],
                target_stds=[0.1, 0.1, 0.2, 0.2]),
            reg_class_agnostic=False,
            loss_cls=dict(
                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),
            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),
        mask_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        mask_head=dict(
            type='FCNMaskHead',
            num_convs=4,
            in_channels=256,
            conv_out_channels=256,
            num_classes=80,
            loss_mask=dict(
                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),
    train_cfg=dict(
        rpn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.7,
                neg_iou_thr=0.3,
                min_pos_iou=0.3,
                match_low_quality=True,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=256,
                pos_fraction=0.5,
                neg_pos_ub=-1,
                add_gt_as_proposals=False),
            allowed_border=-1,
            pos_weight=-1,
            debug=False),
        rpn_proposal=dict(
            nms_pre=2000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.5,
                neg_iou_thr=0.5,
                min_pos_iou=0.5,
                match_low_quality=True,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=512,
                pos_fraction=0.25,
                neg_pos_ub=-1,
                add_gt_as_proposals=True),
            mask_size=28,
            pos_weight=-1,
            debug=False)),
    test_cfg=dict(
        rpn=dict(
            nms_pre=1000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            score_thr=0.05,
            nms=dict(type='nms', iou_threshold=0.5),
            max_per_img=100,
            mask_thr_binary=0.5)))
dataset_type = 'CocoDataset'
data_root = '/mnt/intHDD/coco/'
backend_args = None
train_pipeline = [
    dict(type='LoadImageFromFile', backend_args=None),
    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),
    dict(type='Resize', scale=(1333, 800), keep_ratio=True),
    dict(type='RandomFlip', prob=0.5),
    dict(type='PackDetInputs')
]
test_pipeline = [
    dict(type='LoadImageFromFile', backend_args=None),
    dict(type='Resize', scale=(1333, 800), keep_ratio=True),
    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),
    dict(
        type='PackDetInputs',
        meta_keys=('img_id', 'img_path', 'ori_shape', 'img_shape',
                   'scale_factor'))
]
train_dataloader = dict(
    batch_size=2,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=True),
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    dataset=dict(
        type='CocoDataset',
        data_root='/mnt/intHDD/coco/',
        ann_file='annotations/instances_train2017.json',
        data_prefix=dict(img='train2017/'),
        filter_cfg=dict(filter_empty_gt=True, min_size=32),
        pipeline=[
            dict(type='LoadImageFromFile', backend_args=None),
            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),
            dict(type='Resize', scale=(1333, 800), keep_ratio=True),
            dict(type='RandomFlip', prob=0.5),
            dict(type='PackDetInputs')
        ],
        backend_args=None))
val_dataloader = dict(
    batch_size=1,
    num_workers=2,
    persistent_workers=True,
    drop_last=False,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='CocoDataset',
        data_root='/mnt/intHDD/coco/',
        ann_file='annotations/instances_val2017.json',
        data_prefix=dict(img='val2017/'),
        test_mode=True,
        pipeline=[
            dict(type='LoadImageFromFile', backend_args=None),
            dict(type='Resize', scale=(1333, 800), keep_ratio=True),
            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),
            dict(
                type='PackDetInputs',
                meta_keys=('img_id', 'img_path', 'ori_shape', 'img_shape',
                           'scale_factor'))
        ],
        backend_args=None))
test_dataloader = dict(
    batch_size=1,
    num_workers=2,
    persistent_workers=True,
    drop_last=False,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='CocoDataset',
        data_root='/mnt/intHDD/coco/',
        ann_file='annotations/instances_val2017.json',
        data_prefix=dict(img='val2017/'),
        test_mode=True,
        pipeline=[
            dict(type='LoadImageFromFile', backend_args=None),
            dict(type='Resize', scale=(1333, 800), keep_ratio=True),
            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),
            dict(
                type='PackDetInputs',
                meta_keys=('img_id', 'img_path', 'ori_shape', 'img_shape',
                           'scale_factor'))
        ],
        backend_args=None))
val_evaluator = dict(
    type='CocoMetric',
    ann_file='/mnt/intHDD/coco/annotations/instances_val2017.json',
    metric=['bbox', 'segm'],
    format_only=False,
    backend_args=None)
test_evaluator = dict(
    type='CocoMetric',
    ann_file='/mnt/intHDD/coco/annotations/instances_val2017.json',
    metric=['bbox', 'segm'],
    format_only=False,
    backend_args=None)
train_cfg = dict(type='EpochBasedTrainLoop', max_epochs=12, val_interval=1)
val_cfg = dict(type='ValLoop')
test_cfg = dict(type='TestLoop')
param_scheduler = [
    dict(
        type='LinearLR', start_factor=0.001, by_epoch=False, begin=0, end=500),
    dict(
        type='MultiStepLR',
        begin=0,
        end=12,
        by_epoch=True,
        milestones=[8, 11],
        gamma=0.1)
]
optim_wrapper = dict(
    type='OptimWrapper',
    optimizer=dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001))
auto_scale_lr = dict(enable=False, base_batch_size=16)
default_scope = 'mmdet'
default_hooks = dict(
    timer=dict(type='IterTimerHook'),
    logger=dict(type='LoggerHook', interval=50),
    param_scheduler=dict(type='ParamSchedulerHook'),
    checkpoint=dict(type='CheckpointHook', interval=1),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    visualization=dict(type='DetVisualizationHook'))
env_cfg = dict(
    cudnn_benchmark=False,
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0),
    dist_cfg=dict(backend='nccl'))
vis_backends = [dict(type='LocalVisBackend')]
visualizer = dict(
    type='DetLocalVisualizer',
    vis_backends=[dict(type='LocalVisBackend')],
    name='visualizer')
log_processor = dict(type='LogProcessor', window_size=50, by_epoch=True)
log_level = 'INFO'
load_from = '/home/gorilla/lee_ws/mmdetector/mmdetection/rtmdet_tiny_8xb32-300e_coco_20220902_112414-78e30dcc.pth'
resume = False
work_dir = './result/'
tta_model = dict(
    type='DetTTAModel',
    tta_cfg=dict(nms=dict(type='nms', iou_threshold=0.5), max_per_img=100))

2023/06/29 22:25:58 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2023/06/29 22:25:58 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train:
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2023/06/29 22:26:00 - mmengine - INFO - Load checkpoint from /home/gorilla/lee_ws/mmdetector/mmdetection/rtmdet_tiny_8xb32-300e_coco_20220902_112414-78e30dcc.pth
2023/06/29 22:26:03 - mmengine - INFO - Epoch(test) [  50/5000]    eta: 0:04:32  time: 0.0550  data_time: 0.0119  memory: 529  
2023/06/29 22:26:05 - mmengine - INFO - Epoch(test) [ 100/5000]    eta: 0:04:16  time: 0.0495  data_time: 0.0070  memory: 519  
2023/06/29 22:26:08 - mmengine - INFO - Epoch(test) [ 150/5000]    eta: 0:04:08  time: 0.0491  data_time: 0.0096  memory: 529  
2023/06/29 22:26:10 - mmengine - INFO - Epoch(test) [ 200/5000]    eta: 0:03:56  time: 0.0433  data_time: 0.0067  memory: 512  
2023/06/29 22:26:12 - mmengine - INFO - Epoch(test) [ 250/5000]    eta: 0:03:49  time: 0.0441  data_time: 0.0066  memory: 519  
2023/06/29 22:26:14 - mmengine - INFO - Epoch(test) [ 300/5000]    eta: 0:03:43  time: 0.0440  data_time: 0.0070  memory: 519  
2023/06/29 22:26:17 - mmengine - INFO - Epoch(test) [ 350/5000]    eta: 0:03:39  time: 0.0459  data_time: 0.0087  memory: 510  
2023/06/29 22:26:19 - mmengine - INFO - Epoch(test) [ 400/5000]    eta: 0:03:35  time: 0.0433  data_time: 0.0075  memory: 529  
2023/06/29 22:26:21 - mmengine - INFO - Epoch(test) [ 450/5000]    eta: 0:03:31  time: 0.0449  data_time: 0.0073  memory: 510  
2023/06/29 22:26:23 - mmengine - INFO - Epoch(test) [ 500/5000]    eta: 0:03:29  time: 0.0460  data_time: 0.0089  memory: 519  
2023/06/29 22:26:26 - mmengine - INFO - Epoch(test) [ 550/5000]    eta: 0:03:26  time: 0.0448  data_time: 0.0074  memory: 529  
2023/06/29 22:26:28 - mmengine - INFO - Epoch(test) [ 600/5000]    eta: 0:03:24  time: 0.0472  data_time: 0.0099  memory: 529  
2023/06/29 22:26:30 - mmengine - INFO - Epoch(test) [ 650/5000]    eta: 0:03:22  time: 0.0486  data_time: 0.0109  memory: 512  
2023/06/29 22:26:33 - mmengine - INFO - Epoch(test) [ 700/5000]    eta: 0:03:20  time: 0.0471  data_time: 0.0090  memory: 529  
2023/06/29 22:26:35 - mmengine - INFO - Epoch(test) [ 750/5000]    eta: 0:03:18  time: 0.0474  data_time: 0.0099  memory: 512  
2023/06/29 22:26:37 - mmengine - INFO - Epoch(test) [ 800/5000]    eta: 0:03:15  time: 0.0446  data_time: 0.0071  memory: 529  
2023/06/29 22:26:40 - mmengine - INFO - Epoch(test) [ 850/5000]    eta: 0:03:13  time: 0.0472  data_time: 0.0092  memory: 519  
2023/06/29 22:26:42 - mmengine - INFO - Epoch(test) [ 900/5000]    eta: 0:03:10  time: 0.0451  data_time: 0.0086  memory: 512  
2023/06/29 22:26:44 - mmengine - INFO - Epoch(test) [ 950/5000]    eta: 0:03:08  time: 0.0466  data_time: 0.0089  memory: 510  
2023/06/29 22:26:47 - mmengine - INFO - Epoch(test) [1000/5000]    eta: 0:03:05  time: 0.0443  data_time: 0.0079  memory: 512  
2023/06/29 22:26:49 - mmengine - INFO - Epoch(test) [1050/5000]    eta: 0:03:03  time: 0.0456  data_time: 0.0076  memory: 519  
2023/06/29 22:26:51 - mmengine - INFO - Epoch(test) [1100/5000]    eta: 0:03:00  time: 0.0468  data_time: 0.0091  memory: 529  
2023/06/29 22:26:53 - mmengine - INFO - Epoch(test) [1150/5000]    eta: 0:02:58  time: 0.0461  data_time: 0.0088  memory: 510  
2023/06/29 22:26:56 - mmengine - INFO - Epoch(test) [1200/5000]    eta: 0:02:56  time: 0.0465  data_time: 0.0084  memory: 529  
2023/06/29 22:26:58 - mmengine - INFO - Epoch(test) [1250/5000]    eta: 0:02:54  time: 0.0474  data_time: 0.0083  memory: 512  
2023/06/29 22:27:00 - mmengine - INFO - Epoch(test) [1300/5000]    eta: 0:02:51  time: 0.0460  data_time: 0.0082  memory: 529  
2023/06/29 22:27:03 - mmengine - INFO - Epoch(test) [1350/5000]    eta: 0:02:49  time: 0.0462  data_time: 0.0075  memory: 529  
2023/06/29 22:27:05 - mmengine - INFO - Epoch(test) [1400/5000]    eta: 0:02:46  time: 0.0455  data_time: 0.0088  memory: 519  
2023/06/29 22:27:07 - mmengine - INFO - Epoch(test) [1450/5000]    eta: 0:02:44  time: 0.0468  data_time: 0.0079  memory: 529  
2023/06/29 22:27:10 - mmengine - INFO - Epoch(test) [1500/5000]    eta: 0:02:42  time: 0.0469  data_time: 0.0081  memory: 510  
2023/06/29 22:27:12 - mmengine - INFO - Epoch(test) [1550/5000]    eta: 0:02:39  time: 0.0454  data_time: 0.0074  memory: 529  
2023/06/29 22:27:14 - mmengine - INFO - Epoch(test) [1600/5000]    eta: 0:02:37  time: 0.0445  data_time: 0.0067  memory: 519  
2023/06/29 22:27:16 - mmengine - INFO - Epoch(test) [1650/5000]    eta: 0:02:34  time: 0.0448  data_time: 0.0081  memory: 529  
2023/06/29 22:27:19 - mmengine - INFO - Epoch(test) [1700/5000]    eta: 0:02:32  time: 0.0430  data_time: 0.0065  memory: 512  
2023/06/29 22:27:21 - mmengine - INFO - Epoch(test) [1750/5000]    eta: 0:02:30  time: 0.0480  data_time: 0.0097  memory: 529  
2023/06/29 22:27:23 - mmengine - INFO - Epoch(test) [1800/5000]    eta: 0:02:27  time: 0.0454  data_time: 0.0080  memory: 512  
2023/06/29 22:27:26 - mmengine - INFO - Epoch(test) [1850/5000]    eta: 0:02:25  time: 0.0448  data_time: 0.0071  memory: 529  
2023/06/29 22:27:28 - mmengine - INFO - Epoch(test) [1900/5000]    eta: 0:02:23  time: 0.0467  data_time: 0.0091  memory: 529  
2023/06/29 22:27:30 - mmengine - INFO - Epoch(test) [1950/5000]    eta: 0:02:20  time: 0.0443  data_time: 0.0074  memory: 529  
2023/06/29 22:27:32 - mmengine - INFO - Epoch(test) [2000/5000]    eta: 0:02:18  time: 0.0457  data_time: 0.0073  memory: 529  
2023/06/29 22:27:35 - mmengine - INFO - Epoch(test) [2050/5000]    eta: 0:02:15  time: 0.0457  data_time: 0.0083  memory: 501  
2023/06/29 22:27:37 - mmengine - INFO - Epoch(test) [2100/5000]    eta: 0:02:13  time: 0.0436  data_time: 0.0068  memory: 519  
2023/06/29 22:27:39 - mmengine - INFO - Epoch(test) [2150/5000]    eta: 0:02:11  time: 0.0466  data_time: 0.0079  memory: 512  
2023/06/29 22:27:41 - mmengine - INFO - Epoch(test) [2200/5000]    eta: 0:02:08  time: 0.0445  data_time: 0.0076  memory: 512  
2023/06/29 22:27:44 - mmengine - INFO - Epoch(test) [2250/5000]    eta: 0:02:06  time: 0.0470  data_time: 0.0085  memory: 519  
2023/06/29 22:27:46 - mmengine - INFO - Epoch(test) [2300/5000]    eta: 0:02:04  time: 0.0483  data_time: 0.0092  memory: 495  
2023/06/29 22:27:48 - mmengine - INFO - Epoch(test) [2350/5000]    eta: 0:02:02  time: 0.0451  data_time: 0.0073  memory: 512  
2023/06/29 22:27:51 - mmengine - INFO - Epoch(test) [2400/5000]    eta: 0:01:59  time: 0.0485  data_time: 0.0089  memory: 519  
2023/06/29 22:27:53 - mmengine - INFO - Epoch(test) [2450/5000]    eta: 0:01:57  time: 0.0474  data_time: 0.0085  memory: 519  
2023/06/29 22:27:55 - mmengine - INFO - Epoch(test) [2500/5000]    eta: 0:01:55  time: 0.0443  data_time: 0.0068  memory: 529  
2023/06/29 22:27:58 - mmengine - INFO - Epoch(test) [2550/5000]    eta: 0:01:52  time: 0.0460  data_time: 0.0083  memory: 519  
2023/06/29 22:28:00 - mmengine - INFO - Epoch(test) [2600/5000]    eta: 0:01:50  time: 0.0453  data_time: 0.0068  memory: 529  
2023/06/29 22:28:02 - mmengine - INFO - Epoch(test) [2650/5000]    eta: 0:01:48  time: 0.0456  data_time: 0.0082  memory: 512  
2023/06/29 22:28:05 - mmengine - INFO - Epoch(test) [2700/5000]    eta: 0:01:45  time: 0.0456  data_time: 0.0076  memory: 529  
2023/06/29 22:28:07 - mmengine - INFO - Epoch(test) [2750/5000]    eta: 0:01:43  time: 0.0453  data_time: 0.0078  memory: 529  
2023/06/29 22:28:09 - mmengine - INFO - Epoch(test) [2800/5000]    eta: 0:01:41  time: 0.0472  data_time: 0.0093  memory: 529  
2023/06/29 22:28:12 - mmengine - INFO - Epoch(test) [2850/5000]    eta: 0:01:39  time: 0.0469  data_time: 0.0085  memory: 512  
2023/06/29 22:28:14 - mmengine - INFO - Epoch(test) [2900/5000]    eta: 0:01:36  time: 0.0457  data_time: 0.0078  memory: 529  
2023/06/29 22:28:16 - mmengine - INFO - Epoch(test) [2950/5000]    eta: 0:01:34  time: 0.0476  data_time: 0.0095  memory: 529  
2023/06/29 22:28:19 - mmengine - INFO - Epoch(test) [3000/5000]    eta: 0:01:32  time: 0.0456  data_time: 0.0077  memory: 519  
2023/06/29 22:28:21 - mmengine - INFO - Epoch(test) [3050/5000]    eta: 0:01:29  time: 0.0466  data_time: 0.0084  memory: 529  
2023/06/29 22:28:23 - mmengine - INFO - Epoch(test) [3100/5000]    eta: 0:01:27  time: 0.0467  data_time: 0.0083  memory: 529  
2023/06/29 22:28:26 - mmengine - INFO - Epoch(test) [3150/5000]    eta: 0:01:25  time: 0.0459  data_time: 0.0076  memory: 512  
2023/06/29 22:28:28 - mmengine - INFO - Epoch(test) [3200/5000]    eta: 0:01:22  time: 0.0441  data_time: 0.0065  memory: 529  
2023/06/29 22:28:30 - mmengine - INFO - Epoch(test) [3250/5000]    eta: 0:01:20  time: 0.0461  data_time: 0.0086  memory: 497  
2023/06/29 22:28:32 - mmengine - INFO - Epoch(test) [3300/5000]    eta: 0:01:18  time: 0.0458  data_time: 0.0080  memory: 529  
2023/06/29 22:28:35 - mmengine - INFO - Epoch(test) [3350/5000]    eta: 0:01:16  time: 0.0481  data_time: 0.0096  memory: 529  
2023/06/29 22:28:37 - mmengine - INFO - Epoch(test) [3400/5000]    eta: 0:01:13  time: 0.0466  data_time: 0.0088  memory: 512  
2023/06/29 22:28:39 - mmengine - INFO - Epoch(test) [3450/5000]    eta: 0:01:11  time: 0.0470  data_time: 0.0090  memory: 529  
2023/06/29 22:28:42 - mmengine - INFO - Epoch(test) [3500/5000]    eta: 0:01:09  time: 0.0440  data_time: 0.0070  memory: 529  
2023/06/29 22:28:44 - mmengine - INFO - Epoch(test) [3550/5000]    eta: 0:01:06  time: 0.0450  data_time: 0.0082  memory: 519  
2023/06/29 22:28:46 - mmengine - INFO - Epoch(test) [3600/5000]    eta: 0:01:04  time: 0.0463  data_time: 0.0089  memory: 519  
2023/06/29 22:28:48 - mmengine - INFO - Epoch(test) [3650/5000]    eta: 0:01:02  time: 0.0446  data_time: 0.0065  memory: 529  
2023/06/29 22:28:51 - mmengine - INFO - Epoch(test) [3700/5000]    eta: 0:00:59  time: 0.0480  data_time: 0.0101  memory: 495  
2023/06/29 22:28:53 - mmengine - INFO - Epoch(test) [3750/5000]    eta: 0:00:57  time: 0.0458  data_time: 0.0077  memory: 512  
2023/06/29 22:28:55 - mmengine - INFO - Epoch(test) [3800/5000]    eta: 0:00:55  time: 0.0455  data_time: 0.0078  memory: 519  
2023/06/29 22:28:58 - mmengine - INFO - Epoch(test) [3850/5000]    eta: 0:00:53  time: 0.0470  data_time: 0.0089  memory: 529  
2023/06/29 22:29:00 - mmengine - INFO - Epoch(test) [3900/5000]    eta: 0:00:50  time: 0.0455  data_time: 0.0076  memory: 512  
2023/06/29 22:29:02 - mmengine - INFO - Epoch(test) [3950/5000]    eta: 0:00:48  time: 0.0441  data_time: 0.0070  memory: 510  
2023/06/29 22:29:05 - mmengine - INFO - Epoch(test) [4000/5000]    eta: 0:00:46  time: 0.0451  data_time: 0.0077  memory: 501  
2023/06/29 22:29:07 - mmengine - INFO - Epoch(test) [4050/5000]    eta: 0:00:43  time: 0.0487  data_time: 0.0105  memory: 519  
2023/06/29 22:29:09 - mmengine - INFO - Epoch(test) [4100/5000]    eta: 0:00:41  time: 0.0447  data_time: 0.0070  memory: 529  
2023/06/29 22:29:11 - mmengine - INFO - Epoch(test) [4150/5000]    eta: 0:00:39  time: 0.0457  data_time: 0.0078  memory: 501  
2023/06/29 22:29:14 - mmengine - INFO - Epoch(test) [4200/5000]    eta: 0:00:36  time: 0.0463  data_time: 0.0085  memory: 510  
2023/06/29 22:29:16 - mmengine - INFO - Epoch(test) [4250/5000]    eta: 0:00:34  time: 0.0447  data_time: 0.0075  memory: 529  
2023/06/29 22:29:18 - mmengine - INFO - Epoch(test) [4300/5000]    eta: 0:00:32  time: 0.0454  data_time: 0.0075  memory: 510  
2023/06/29 22:29:21 - mmengine - INFO - Epoch(test) [4350/5000]    eta: 0:00:29  time: 0.0454  data_time: 0.0081  memory: 529  
2023/06/29 22:29:23 - mmengine - INFO - Epoch(test) [4400/5000]    eta: 0:00:27  time: 0.0464  data_time: 0.0087  memory: 512  
2023/06/29 22:29:25 - mmengine - INFO - Epoch(test) [4450/5000]    eta: 0:00:25  time: 0.0451  data_time: 0.0079  memory: 512  
2023/06/29 22:29:27 - mmengine - INFO - Epoch(test) [4500/5000]    eta: 0:00:23  time: 0.0463  data_time: 0.0083  memory: 519  
2023/06/29 22:29:30 - mmengine - INFO - Epoch(test) [4550/5000]    eta: 0:00:20  time: 0.0472  data_time: 0.0089  memory: 529  
2023/06/29 22:29:32 - mmengine - INFO - Epoch(test) [4600/5000]    eta: 0:00:18  time: 0.0473  data_time: 0.0094  memory: 512  
2023/06/29 22:29:35 - mmengine - INFO - Epoch(test) [4650/5000]    eta: 0:00:16  time: 0.0490  data_time: 0.0109  memory: 495  
2023/06/29 22:29:37 - mmengine - INFO - Epoch(test) [4700/5000]    eta: 0:00:13  time: 0.0461  data_time: 0.0076  memory: 519  
2023/06/29 22:29:39 - mmengine - INFO - Epoch(test) [4750/5000]    eta: 0:00:11  time: 0.0454  data_time: 0.0080  memory: 512  
2023/06/29 22:29:41 - mmengine - INFO - Epoch(test) [4800/5000]    eta: 0:00:09  time: 0.0449  data_time: 0.0081  memory: 529  
2023/06/29 22:29:44 - mmengine - INFO - Epoch(test) [4850/5000]    eta: 0:00:06  time: 0.0448  data_time: 0.0073  memory: 529  
2023/06/29 22:29:46 - mmengine - INFO - Epoch(test) [4900/5000]    eta: 0:00:04  time: 0.0457  data_time: 0.0080  memory: 519  
2023/06/29 22:29:48 - mmengine - INFO - Epoch(test) [4950/5000]    eta: 0:00:02  time: 0.0477  data_time: 0.0104  memory: 529  
2023/06/29 22:29:51 - mmengine - INFO - Epoch(test) [5000/5000]    eta: 0:00:00  time: 0.0453  data_time: 0.0078  memory: 529  
2023/06/29 22:29:51 - mmengine - INFO - Evaluating bbox...
2023/06/29 22:29:51 - mmengine - ERROR - /home/gorilla/.pyenv/versions/model_opt/lib/python3.8/site-packages/mmdet/evaluation/metrics/coco_metric.py - compute_metrics - 461 - The testing results of the whole dataset is empty.
2023/06/29 22:29:51 - mmengine - INFO - Epoch(test) [5000/5000]    data_time: 0.0082  time: 0.0461
